// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean       @default(false)
  accounts      Account[]
  sessions      Session[]
  pullRequests  PullRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organisations {
  id           Int           @id
  name         String
  avatar_url   String?       @default("https://www.campusfrance.org/sites/default/files/styles/mobile_visuel_principal_page/public/organisation%20organigramme_3.jpg?itok=qD2R_LHp")
  github_url   String?
  pullRequests PullRequest[]
}

model PullRequest {
  id         String   @id @default(cuid())
  prURL      String
  prTitle    String
  prNumber   Int
  repoURL    String
  userName   String
  avatar     String
  commentURL String
  isVerified Boolean
  mergedAt   DateTime
  body       String?
  prPoint    Int
  draft      Boolean
  bounty     String? // Nullable field for bounty information

  orgId Int
  org   Organisations @relation(fields: [orgId], references: [id], onDelete: Cascade)

  userId String // Foreign key relation to User model
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
